image: node:12.16.3-alpine3.11

variables:
  NPM_CONFIG_CACHE: "$CI_PROJECT_DIR/.npm-cache"

stages:
  - build
  - build-docker
  - deploy

build:
  stage: build
  script:
    # install dependencies
    - yarn install --frozen-lockfile --cache-folder .yarn-cache

    # lint
    - yarn lint

    # build
    - yarn build --prod
  cache:
    key: dependencies-${CI_COMMIT_REF_NAME}
    paths:
      - .yarn-cache
  artifacts:
    paths:
      - dist/
    expire_in: 1 day

build-docker:
  stage: build-docker
  image: docker:stable-git
  services:
    - docker:stable-dind
  script:
    - build
  dependencies:
    - build
  only:
    - master

deploy-prod:
  stage: deploy
  image:
    name: totakoko/compose-deploy
    entrypozint: ['']
  script:
    - MODULES_ROOT=$PWD compose-deploy update-module spotiblind ui
  environment:
    name: production
    url: https://spotiblind.totakoko.com
  # Disable cache and previous artifacts
  cache: {}
  dependencies: []
  only:
    - master


# Adapted from https://gitlab.com/gitlab-org/gitlab-ci-yml/blob/master/Auto-DevOps.gitlab-ci.yml
.script_functions: &script_functions |
  [[ "$TRACE" ]] && set -x
  export CI_APPLICATION_REPOSITORY=$CI_REGISTRY_IMAGE
  export CI_APPLICATION_TAG=$CI_COMMIT_SHA

  function build() {
    if [[ -n "$CI_REGISTRY_USER" ]]; then
      echo "Logging to GitLab Container Registry with CI credentials..."
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
      echo ""
    fi

    if [[ -f Dockerfile ]]; then
      echo "Building Dockerfile-based application..."
      docker build --pull -t "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" .
      docker tag "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" "$CI_APPLICATION_REPOSITORY:latest"
    else
      echo "Missing Dockerfile!"
      exit 1
    fi

    echo "Pushing to GitLab Container Registry..."
    docker push "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"
    docker push "$CI_APPLICATION_REPOSITORY:latest"
    echo ""
  }

before_script:
  - *script_functions
